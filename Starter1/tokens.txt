TERMINALS/TOKENS

***keywords***

IF 		if
ELSE	else
WHILE	while
BREAK	break
RETURN	return
CONST	const
VOID	void


***elements*** (they all have values)

INT_V  		e.g. 0 32767  
			check bound integers (âˆ’2^21 , 2^21)
			0|[1-9][0-9]*
FLOAT_V		e.g. 0.0 17.45
			(0|[1-9][0-9]*)"."[0-9]+

TRUE_V 		true
FALSE_V		false

ID			e.g. AM A1 A_B 
			check length (less than 32)
			[a-zA-Z_][a-zA-Z_0-9]*

TEXT		e.g. "aB )'$" "He said ""hello""."
			anything inside quotation marks
			quotation marks appearing inside text are denoted by pairs of quotation marks 
			


***data types***

INTEGER_T	int
BOOLEAN_T	bool
FLOAT_T		float
VEC2_T		vec2
VEC3_T		vec3
VEC4_T		vec4
IVEC2_T		ivec2
IVEC3_T		ivec3
IVEC4_T		ivec4
BVEC2_T		bvec2
BVEC3_T		bvec3
BVEC4_T		bvec4


***operators*** (not sure if we need to define each one as a token)
'!'  NOT
'+'  ADD
'-'  SUB
'*'  MULT
'/'  DIV
'^'  EXP
'='  ASSIGN
'&&' AND
'||' OR
'<'  CMP_LT
'>'  CMP_GT
'<=' CMP_LE 
'>=' CMP_GE 
'==' CMP_EQ
'!=' CMP_NE
','  COMMA
';'  SEMICOLON




***brackets***
'(' LEFT_PAR
')' RIGHT_PAR
'[' LEFT_SQUARE
']' RIGHT_SQUARE
'{' LEFT_BRACE
'}' RIGHT_BRACE




***predefined variables*** (will each one be a token?)

vec4 gl_FragColor (result) 
bool gl_FragDepth (result)
vec4 gl_FragCoord (result)
vec4 gl_TexCoord (attribute)
vec4 gl_Color (attribute)
vec4 gl_Secondary (attribute)
vec4 gl_FogFragCoord (attribute)
vec4 gl_Light_Half(uniform)
vec4 gl_Light_Ambient(uniform)
vec4 gl_Material_Shininess(uniform)
vec4 env1(uniform)
vec4 env2(uniform)
vec4 env3 (uniform)



***predefined functions***

LIT lit
	vec4 lit(vec4);
DP3 dp3
	float dp3(vec4,vec4);
	float dp3(vec3,vec3);
	int dp3(ivec4,ivec4);
	int dp3(ivec3,ivec3);
RSQ rsq
	float rsq(float);
	float rsq(int);


******IMPORTANT******

The project source language is case sensitive. Tokens may be separated by blanks, comments, or
line boundaries. An identifier or keyword must be separated from a following identifier,
keyword, or integer; in all other cases, tokens need not be separated. As the example indicates,
quotation marks appearing inside text are denoted by pairs of quotation marks. Comments can be
continued across a line boundary, but no other token can.
