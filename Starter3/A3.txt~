Jared Eisen - 998212483
Yuka Kyushima Solano - 1001009231

Assignment 3

We completed AST construction using the sample code as a basis.  We needed to add a few more node types, and a few extra attributes to the node struct, such as a pointer to the symbol table for the scope of the node.  Since the parser is bottom up, we were able to build the tree bottom up as well, which was very convenient.

Next, we implemented the AST printing.  Printing was done top down, as per the specification.  We didn't immediately have access to the types for the different nodes, so we filled that in after we wrote our semantic analyzer.

We then implemented the AST teardown.  This was simply a matter of traversing the tree in a post-order fashion, and freeing the memory we had allocated.

Then, we implemented the semantic checking.  There were a few features we didn't have time to fully implement, such as properly enforcing the properties of the pre-defined variables, but we did basically all of the other semantic checks, such as type checking.  As the first part of our semantic checking, we built the symbol tables.  We did this by traversing the tree top-down, and allocating a new symbol table whenever we hit a scope node.  Each symbol table had a pointer to the table above it, so variables in higher scopes could be found if no matching variable was present in the current scope.

Finally, we traversed the tree bottom up, assigning types to each of the nodes for which it made sense to do so, following the semantics of the language.  We simultaneously checked for any semantics errors and reported them, trying to give somewhat helpful error messages, such as the name the variable that was being assigned the wrong type and what type was expected.
