###########################################
#										  #
#				TEST CASES				  #
#										  #
###########################################


The  main function is enclosed inside a scope

	{ int num =5; num =10;}
	declarations -> Epsilon
	type -> INT_T
	expression -> INT_C
	declaration -> type ID = expression ;
	declarations -> declarations declaration
	statements -> Epsilon
	variable -> ID
	expression -> INT_C
	statement -> variable = expression
	statements -> statements statement
	scope -> { declarations statements }
	program -> scope



Otherwise it gets an error 

	int num =5; num =10;

	PARSER ERROR, LINE 1: syntax error, unexpected INT_T, expecting '{'


###########################################


Declaration is similar to C

	{int num; vec3 myvec;}
	declarations -> Epsilon
	type -> INT_T
	declaration -> type ID ;
	declarations -> declarations declaration
	type -> VEC_T
	declaration -> type ID ;
	declarations -> declarations declaration
	statements -> Epsilon
	scope -> { declarations statements }
	program -> scope

But it is not allowed to declare 2 variables in 1 declaration

	{int num1,num2;}
	declarations -> Epsilon
	type -> INT_T

	PARSER ERROR, LINE 1: syntax error, unexpected ',', expecting '=' or ';'

###########################################

Operators do not associate

	{int a = b = 3;}
	declarations -> Epsilon
	type -> INT_T
	variable -> ID
	expression -> variable

	PARSER ERROR, LINE 1: syntax error, unexpected '='


###########################################

Vectors are initialized using constructors

	{bvec3 myBVec = bvec3(true,false,true);}
	declarations -> Epsilon
	type -> BVEC_T
	type -> BVEC_T
	expression -> TRUE_C
	arguments -> expression
	expression -> FALSE_C
	arguments -> arguments, expression
	expression -> TRUE_C
	arguments -> arguments, expression
	constructor -> type (arguments)
	expression -> constructor
	declaration -> type ID = expression ;
	declarations -> declarations declaration
	statements -> Epsilon
	scope -> '{' declarations statements '}'
	program -> scope

###########################################

Vectors can be accessed similarly to arrays

	{int num = myVec[2];}
	declarations -> Epsilon
	type -> INT_T
	variable -> ID[INT_C]
	expression -> variable
	declaration -> type ID = expression ;
	declarations -> declarations declaration
	statements -> Epsilon
	scope -> '{' declarations statements '}'
	program -> scope

###########################################
	
Type casting is not allowed

	{int num = (int) 5.0;}
	declarations -> Epsilon
	type -> INT_T
	type -> INT_T

	PARSER ERROR, LINE 1: syntax error, unexpected ')', expecting '('


###########################################

The declaration of a compile time constant is like C.

	{const int num = 1;}
	declarations -> Epsilon
	type -> INT_T
	expression -> INT_C
	CONST declaration -> type ID = expression ;
	declarations -> declarations declaration
	statements -> Epsilon
	scope -> '{' declarations statements '}'
	program -> scope


###########################################

WHILE statemets

	{while(true){a=a+1;}}
	declarations -> Epsilon
	statements -> Epsilon
	expression -> TRUE_C
	declarations -> Epsilon
	statements -> Epsilon
	variable -> ID
	variable -> ID
	expression -> variable
	add_op -> +
	expression -> INT_C
	expression -> expression add_op expression
	statement -> variable = expression
	statements -> statements statement
	scope -> { declarations statements }
	statement -> scope
	statement -> while(expression) statement
	statements -> statements statement
	scope -> { declarations statements }
	program -> scope



###########################################

IF statements

	{if(a==true) b = 1.4;}
	declarations -> Epsilon
	statements -> Epsilon
	variable -> ID
	expression -> variable
	comp -> EQ
	expression -> TRUE_C
	expression -> expression comp expression
	variable -> ID
	expression -> FLOAT_C
	statement -> variable = expression
	else_statement -> Epsilon
	statement -> if(expression) statement else_statement
	statements -> statements statement
	scope -> { declarations statements }
	program -> scope


###########################################

IF_ELSE statements

	{if(a==true) b = 1.4; else b = 2.8;}
	declarations -> Epsilon
	statements -> Epsilon
	variable -> ID
	expression -> variable
	comp -> EQ
	expression -> TRUE_C
	expression -> expression comp expression
	variable -> ID
	expression -> FLOAT_C
	statement -> variable = expression
	variable -> ID
	expression -> FLOAT_C
	statement -> variable = expression
	else_statement -> ELSE statement
	statement -> if(expression) statement else_statement
	statements -> statements statement
	scope -> { declarations statements }
	program -> scope


	{if(a==true) b = 1.4; else if (c == true) b = 2.8; else b = 4.2;}
	declarations -> Epsilon
	statements -> Epsilon
	variable -> ID
	expression -> variable
	comp -> EQ
	expression -> TRUE_C
	expression -> expression comp expression
	variable -> ID
	expression -> FLOAT_C
	statement -> variable = expression
	variable -> ID
	expression -> variable
	comp -> EQ
	expression -> TRUE_C
	expression -> expression comp expression
	variable -> ID
	expression -> FLOAT_C
	statement -> variable = expression
	variable -> ID
	expression -> FLOAT_C
	statement -> variable = expression
	else_statement -> ELSE statement
	statement -> if(expression) statement else_statement
	else_statement -> ELSE statement
	statement -> if(expression) statement else_statement
	statements -> statements statement
	scope -> { declarations statements }
	program -> scope


###########################################

FUNCTIONS

	{ a = dp3(vector1,vector2);}
	declarations -> Epsilon
	statements -> Epsilon
	variable -> ID
	function_name -> FUNC
	variable -> ID
	expression -> variable
	arguments -> expression
	variable -> ID
	expression -> variable
	arguments -> arguments, expression
	arguments_opt -> arguments
	function -> (arguments_opt)
	expression -> function
	statement -> variable = expression
	statements -> statements statement
	scope -> { declarations statements }
	program -> scope


###########################################

Precedences

This statement should be read as a = (5 + (4 * 3));

	{ a = 5 + 4 * 3;}   
	declarations -> Epsilon
	statements -> Epsilon
	variable -> ID
	expression -> INT_C
	add_op -> +
	expression -> INT_C
	mult_op -> *
	expression -> INT_C
	expression -> expression mult_op expression
	expression -> expression add_op expression
	statement -> variable = expression
	statements -> statements statement
	scope -> { declarations statements }
	program -> scope



This statement should be read as a = ((5 ^ (-2)) + 3);

	{a= 5 ^ -2 + 3;}
	declarations -> Epsilon
	statements -> Epsilon
	variable -> ID
	expression -> INT_C
	exp_op -> ^
	unary_op -> -
	expression -> INT_C
	expression -> unary_op expression
	expression -> expression exp_op expression
	add_op -> +
	expression -> INT_C
	expression -> expression add_op expression
	statement -> variable = expression
	statements -> statements statement
	scope -> { declarations statements }
	program -> scope

This statement should be read as while((a>=0) || ((b != c) && (!d)));

	{while(a>=0 || b != c && !d);}
	declarations -> Epsilon
	statements -> Epsilon
	variable -> ID
	expression -> variable
	comp -> GEQ
	expression -> INT_C
	expression -> expression comp expression
	or_op -> OR
	variable -> ID
	expression -> variable
	comp -> NEQ
	variable -> ID
	expression -> variable
	expression -> expression comp expression
	and_op -> AND
	unary_op -> !
	variable -> ID
	expression -> variable
	expression -> unary_op expression
	expression -> expression and_op expression
	expression -> expression or_op expression
	statement -> ;
	statement -> while(expression) statement
	statements -> statements statement
	scope -> { declarations statements }
	program -> scope








