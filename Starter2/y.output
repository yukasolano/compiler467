State 86 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: scope

    2 scope: '{' declarations statements '}'

    3 declarations: declarations declaration
    4             | /* empty */

    5 statements: statements statement
    6           | /* empty */

    7 declaration: type ID ';'
    8            | type ID '=' expression ';'
    9            | CONST type ID '=' expression ';'

   10 statement: variable '=' expression ';'
   11          | IF '(' expression ')' statement else_statement
   12          | WHILE '(' expression ')' statement
   13          | scope
   14          | ';'

   15 else_statement: ELSE statement
   16               | /* empty */

   17 type: INT_T
   18     | IVEC_T
   19     | BOOL_T
   20     | BVEC_T
   21     | FLOAT_T
   22     | VEC_T

   23 expression: constructor
   24           | function
   25           | INT_C
   26           | FLOAT_C
   27           | variable
   28           | unary_op expression
   29           | expression add_op expression
   30           | expression mult_op expression
   31           | expression exp_op expression
   32           | expression and_op expression
   33           | expression or_op expression
   34           | expression comp expression
   35           | TRUE_C
   36           | FALSE_C
   37           | '(' expression ')'

   38 variable: ID
   39         | ID '[' INT_C ']'

   40 unary_op: '!'
   41         | '-'

   42 and_op: AND

   43 or_op: OR

   44 comp: EQ
   45     | NEQ
   46     | LEQ
   47     | GEQ
   48     | '<'
   49     | '>'

   50 add_op: '+'
   51       | '-'

   52 mult_op: '*'
   53        | '/'

   54 exp_op: '^'

   55 constructor: type '(' arguments ')'

   56 function: function_name '(' arguments_opt ')'

   57 function_name: FUNC

   58 arguments_opt: arguments
   59              | /* empty */

   60 arguments: arguments ',' expression
   61          | expression


Terminals, with rules where they appear

$end (0) 0
'!' (33) 40
'(' (40) 11 12 37 55 56
')' (41) 11 12 37 55 56
'*' (42) 52
'+' (43) 50
',' (44) 60
'-' (45) 41 51
'/' (47) 53
';' (59) 7 8 9 10 14
'<' (60) 48
'=' (61) 8 9 10
'>' (62) 49
'[' (91) 39
']' (93) 39
'^' (94) 54
'{' (123) 2
'}' (125) 2
error (256)
FLOAT_T (258) 21
INT_T (259) 17
BOOL_T (260) 19
CONST (261) 9
FALSE_C (262) 36
TRUE_C (263) 35
FUNC (264) 57
IF (265) 11
WHILE (266) 12
ELSE (267) 15
AND (268) 42
OR (269) 43
NEQ (270) 45
EQ (271) 44
LEQ (272) 46
GEQ (273) 47
VEC_T (274) 22
BVEC_T (275) 20
IVEC_T (276) 18
FLOAT_C (277) 26
INT_C (278) 25 39
ID (279) 7 8 9 38 39
UMINUS (280)


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
program (44)
    on left: 1, on right: 0
scope (45)
    on left: 2, on right: 1 13
declarations (46)
    on left: 3 4, on right: 2 3
statements (47)
    on left: 5 6, on right: 2 5
declaration (48)
    on left: 7 8 9, on right: 3
statement (49)
    on left: 10 11 12 13 14, on right: 5 11 12 15
else_statement (50)
    on left: 15 16, on right: 11
type (51)
    on left: 17 18 19 20 21 22, on right: 7 8 9 55
expression (52)
    on left: 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37, on right:
    8 9 10 11 12 28 29 30 31 32 33 34 37 60 61
variable (53)
    on left: 38 39, on right: 10 27
unary_op (54)
    on left: 40 41, on right: 28
and_op (55)
    on left: 42, on right: 32
or_op (56)
    on left: 43, on right: 33
comp (57)
    on left: 44 45 46 47 48 49, on right: 34
add_op (58)
    on left: 50 51, on right: 29
mult_op (59)
    on left: 52 53, on right: 30
exp_op (60)
    on left: 54, on right: 31
constructor (61)
    on left: 55, on right: 23
function (62)
    on left: 56, on right: 24
function_name (63)
    on left: 57, on right: 56
arguments_opt (64)
    on left: 58 59, on right: 56
arguments (65)
    on left: 60 61, on right: 55 58 60


state 0

    0 $accept: . program $end

    '{'  shift, and go to state 1

    program  go to state 2
    scope    go to state 3


state 1

    2 scope: '{' . declarations statements '}'

    $default  reduce using rule 4 (declarations)

    declarations  go to state 4


state 2

    0 $accept: program . $end

    $end  shift, and go to state 5


state 3

    1 program: scope .

    $default  reduce using rule 1 (program)


state 4

    2 scope: '{' declarations . statements '}'
    3 declarations: declarations . declaration

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    CONST    shift, and go to state 9
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12

    $default  reduce using rule 6 (statements)

    statements   go to state 13
    declaration  go to state 14
    type         go to state 15


state 5

    0 $accept: program $end .

    $default  accept


state 6

   21 type: FLOAT_T .

    $default  reduce using rule 21 (type)


state 7

   17 type: INT_T .

    $default  reduce using rule 17 (type)


state 8

   19 type: BOOL_T .

    $default  reduce using rule 19 (type)


state 9

    9 declaration: CONST . type ID '=' expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12

    type  go to state 16


state 10

   22 type: VEC_T .

    $default  reduce using rule 22 (type)


state 11

   20 type: BVEC_T .

    $default  reduce using rule 20 (type)


state 12

   18 type: IVEC_T .

    $default  reduce using rule 18 (type)


state 13

    2 scope: '{' declarations statements . '}'
    5 statements: statements . statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    '}'    shift, and go to state 20
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 23
    variable   go to state 24


state 14

    3 declarations: declarations declaration .

    $default  reduce using rule 3 (declarations)


state 15

    7 declaration: type . ID ';'
    8            | type . ID '=' expression ';'

    ID  shift, and go to state 25


state 16

    9 declaration: CONST type . ID '=' expression ';'

    ID  shift, and go to state 26


state 17

   11 statement: IF . '(' expression ')' statement else_statement

    '('  shift, and go to state 27


state 18

   12 statement: WHILE . '(' expression ')' statement

    '('  shift, and go to state 28


state 19

   38 variable: ID .
   39         | ID . '[' INT_C ']'

    '['  shift, and go to state 29

    $default  reduce using rule 38 (variable)


state 20

    2 scope: '{' declarations statements '}' .

    $default  reduce using rule 2 (scope)


state 21

   14 statement: ';' .

    $default  reduce using rule 14 (statement)


state 22

   13 statement: scope .

    $default  reduce using rule 13 (statement)


state 23

    5 statements: statements statement .

    $default  reduce using rule 5 (statements)


state 24

   10 statement: variable . '=' expression ';'

    '='  shift, and go to state 30


state 25

    7 declaration: type ID . ';'
    8            | type ID . '=' expression ';'

    '='  shift, and go to state 31
    ';'  shift, and go to state 32


state 26

    9 declaration: CONST type ID . '=' expression ';'

    '='  shift, and go to state 33


state 27

   11 statement: IF '(' . expression ')' statement else_statement

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 43
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 28

   12 statement: WHILE '(' . expression ')' statement

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 49
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 29

   39 variable: ID '[' . INT_C ']'

    INT_C  shift, and go to state 50


state 30

   10 statement: variable '=' . expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 51
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 31

    8 declaration: type ID '=' . expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 52
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 32

    7 declaration: type ID ';' .

    $default  reduce using rule 7 (declaration)


state 33

    9 declaration: CONST type ID '=' . expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 53
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 34

   36 expression: FALSE_C .

    $default  reduce using rule 36 (expression)


state 35

   35 expression: TRUE_C .

    $default  reduce using rule 35 (expression)


state 36

   57 function_name: FUNC .

    $default  reduce using rule 57 (function_name)


state 37

   26 expression: FLOAT_C .

    $default  reduce using rule 26 (expression)


state 38

   25 expression: INT_C .

    $default  reduce using rule 25 (expression)


state 39

   41 unary_op: '-' .

    $default  reduce using rule 41 (unary_op)


state 40

   40 unary_op: '!' .

    $default  reduce using rule 40 (unary_op)


state 41

   37 expression: '(' . expression ')'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 54
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 42

   55 constructor: type . '(' arguments ')'

    '('  shift, and go to state 55


state 43

   11 statement: IF '(' expression . ')' statement else_statement
   29 expression: expression . add_op expression
   30           | expression . mult_op expression
   31           | expression . exp_op expression
   32           | expression . and_op expression
   33           | expression . or_op expression
   34           | expression . comp expression

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68
    ')'  shift, and go to state 69

    and_op   go to state 70
    or_op    go to state 71
    comp     go to state 72
    add_op   go to state 73
    mult_op  go to state 74
    exp_op   go to state 75


state 44

   27 expression: variable .

    $default  reduce using rule 27 (expression)


state 45

   28 expression: unary_op . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 76
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 46

   23 expression: constructor .

    $default  reduce using rule 23 (expression)


state 47

   24 expression: function .

    $default  reduce using rule 24 (expression)


state 48

   56 function: function_name . '(' arguments_opt ')'

    '('  shift, and go to state 77


state 49

   12 statement: WHILE '(' expression . ')' statement
   29 expression: expression . add_op expression
   30           | expression . mult_op expression
   31           | expression . exp_op expression
   32           | expression . and_op expression
   33           | expression . or_op expression
   34           | expression . comp expression

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68
    ')'  shift, and go to state 78

    and_op   go to state 70
    or_op    go to state 71
    comp     go to state 72
    add_op   go to state 73
    mult_op  go to state 74
    exp_op   go to state 75


state 50

   39 variable: ID '[' INT_C . ']'

    ']'  shift, and go to state 79


state 51

   10 statement: variable '=' expression . ';'
   29 expression: expression . add_op expression
   30           | expression . mult_op expression
   31           | expression . exp_op expression
   32           | expression . and_op expression
   33           | expression . or_op expression
   34           | expression . comp expression

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68
    ';'  shift, and go to state 80

    and_op   go to state 70
    or_op    go to state 71
    comp     go to state 72
    add_op   go to state 73
    mult_op  go to state 74
    exp_op   go to state 75


state 52

    8 declaration: type ID '=' expression . ';'
   29 expression: expression . add_op expression
   30           | expression . mult_op expression
   31           | expression . exp_op expression
   32           | expression . and_op expression
   33           | expression . or_op expression
   34           | expression . comp expression

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68
    ';'  shift, and go to state 81

    and_op   go to state 70
    or_op    go to state 71
    comp     go to state 72
    add_op   go to state 73
    mult_op  go to state 74
    exp_op   go to state 75


state 53

    9 declaration: CONST type ID '=' expression . ';'
   29 expression: expression . add_op expression
   30           | expression . mult_op expression
   31           | expression . exp_op expression
   32           | expression . and_op expression
   33           | expression . or_op expression
   34           | expression . comp expression

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68
    ';'  shift, and go to state 82

    and_op   go to state 70
    or_op    go to state 71
    comp     go to state 72
    add_op   go to state 73
    mult_op  go to state 74
    exp_op   go to state 75


state 54

   29 expression: expression . add_op expression
   30           | expression . mult_op expression
   31           | expression . exp_op expression
   32           | expression . and_op expression
   33           | expression . or_op expression
   34           | expression . comp expression
   37           | '(' expression . ')'

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68
    ')'  shift, and go to state 83

    and_op   go to state 70
    or_op    go to state 71
    comp     go to state 72
    add_op   go to state 73
    mult_op  go to state 74
    exp_op   go to state 75


state 55

   55 constructor: type '(' . arguments ')'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 84
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48
    arguments      go to state 85


state 56

   42 and_op: AND .

    $default  reduce using rule 42 (and_op)


state 57

   43 or_op: OR .

    $default  reduce using rule 43 (or_op)


state 58

   45 comp: NEQ .

    $default  reduce using rule 45 (comp)


state 59

   44 comp: EQ .

    $default  reduce using rule 44 (comp)


state 60

   46 comp: LEQ .

    $default  reduce using rule 46 (comp)


state 61

   47 comp: GEQ .

    $default  reduce using rule 47 (comp)


state 62

   48 comp: '<' .

    $default  reduce using rule 48 (comp)


state 63

   49 comp: '>' .

    $default  reduce using rule 49 (comp)


state 64

   50 add_op: '+' .

    $default  reduce using rule 50 (add_op)


state 65

   51 add_op: '-' .

    $default  reduce using rule 51 (add_op)


state 66

   52 mult_op: '*' .

    $default  reduce using rule 52 (mult_op)


state 67

   53 mult_op: '/' .

    $default  reduce using rule 53 (mult_op)


state 68

   54 exp_op: '^' .

    $default  reduce using rule 54 (exp_op)


state 69

   11 statement: IF '(' expression ')' . statement else_statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 86
    variable   go to state 24


state 70

   32 expression: expression and_op . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 87
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 71

   33 expression: expression or_op . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 88
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 72

   34 expression: expression comp . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 89
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 73

   29 expression: expression add_op . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 90
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 74

   30 expression: expression mult_op . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 91
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 75

   31 expression: expression exp_op . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 92
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 76

   28 expression: unary_op expression .
   29           | expression . add_op expression
   30           | expression . mult_op expression
   31           | expression . exp_op expression
   32           | expression . and_op expression
   33           | expression . or_op expression
   34           | expression . comp expression

    $default  reduce using rule 28 (expression)

    and_op   go to state 70
    or_op    go to state 71
    comp     go to state 72
    add_op   go to state 73
    mult_op  go to state 74
    exp_op   go to state 75


state 77

   56 function: function_name '(' . arguments_opt ')'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    $default  reduce using rule 59 (arguments_opt)

    type           go to state 42
    expression     go to state 84
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48
    arguments_opt  go to state 93
    arguments      go to state 94


state 78

   12 statement: WHILE '(' expression ')' . statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 95
    variable   go to state 24


state 79

   39 variable: ID '[' INT_C ']' .

    $default  reduce using rule 39 (variable)


state 80

   10 statement: variable '=' expression ';' .

    $default  reduce using rule 10 (statement)


state 81

    8 declaration: type ID '=' expression ';' .

    $default  reduce using rule 8 (declaration)


state 82

    9 declaration: CONST type ID '=' expression ';' .

    $default  reduce using rule 9 (declaration)


state 83

   37 expression: '(' expression ')' .

    $default  reduce using rule 37 (expression)


state 84

   29 expression: expression . add_op expression
   30           | expression . mult_op expression
   31           | expression . exp_op expression
   32           | expression . and_op expression
   33           | expression . or_op expression
   34           | expression . comp expression
   61 arguments: expression .

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68

    $default  reduce using rule 61 (arguments)

    and_op   go to state 70
    or_op    go to state 71
    comp     go to state 72
    add_op   go to state 73
    mult_op  go to state 74
    exp_op   go to state 75


state 85

   55 constructor: type '(' arguments . ')'
   60 arguments: arguments . ',' expression

    ')'  shift, and go to state 96
    ','  shift, and go to state 97


state 86

   11 statement: IF '(' expression ')' statement . else_statement

    ELSE  shift, and go to state 98

    ELSE      [reduce using rule 16 (else_statement)]
    $default  reduce using rule 16 (else_statement)

    else_statement  go to state 99


state 87

   29 expression: expression . add_op expression
   30           | expression . mult_op expression
   31           | expression . exp_op expression
   32           | expression . and_op expression
   32           | expression and_op expression .
   33           | expression . or_op expression
   34           | expression . comp expression

    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68

    $default  reduce using rule 32 (expression)

    and_op   go to state 70
    or_op    go to state 71
    comp     go to state 72
    add_op   go to state 73
    mult_op  go to state 74
    exp_op   go to state 75


state 88

   29 expression: expression . add_op expression
   30           | expression . mult_op expression
   31           | expression . exp_op expression
   32           | expression . and_op expression
   33           | expression . or_op expression
   33           | expression or_op expression .
   34           | expression . comp expression

    AND  shift, and go to state 56
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68

    $default  reduce using rule 33 (expression)

    and_op   go to state 70
    or_op    go to state 71
    comp     go to state 72
    add_op   go to state 73
    mult_op  go to state 74
    exp_op   go to state 75


state 89

   29 expression: expression . add_op expression
   30           | expression . mult_op expression
   31           | expression . exp_op expression
   32           | expression . and_op expression
   33           | expression . or_op expression
   34           | expression . comp expression
   34           | expression comp expression .

    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68

    NEQ  error (nonassociative)
    EQ   error (nonassociative)
    LEQ  error (nonassociative)
    GEQ  error (nonassociative)
    '<'  error (nonassociative)
    '>'  error (nonassociative)

    $default  reduce using rule 34 (expression)

    and_op   go to state 70
    or_op    go to state 71
    comp     go to state 72
    add_op   go to state 73
    mult_op  go to state 74
    exp_op   go to state 75


state 90

   29 expression: expression . add_op expression
   29           | expression add_op expression .
   30           | expression . mult_op expression
   31           | expression . exp_op expression
   32           | expression . and_op expression
   33           | expression . or_op expression
   34           | expression . comp expression

    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68

    $default  reduce using rule 29 (expression)

    and_op   go to state 70
    or_op    go to state 71
    comp     go to state 72
    add_op   go to state 73
    mult_op  go to state 74
    exp_op   go to state 75


state 91

   29 expression: expression . add_op expression
   30           | expression . mult_op expression
   30           | expression mult_op expression .
   31           | expression . exp_op expression
   32           | expression . and_op expression
   33           | expression . or_op expression
   34           | expression . comp expression

    '^'  shift, and go to state 68

    $default  reduce using rule 30 (expression)

    and_op   go to state 70
    or_op    go to state 71
    comp     go to state 72
    add_op   go to state 73
    mult_op  go to state 74
    exp_op   go to state 75


state 92

   29 expression: expression . add_op expression
   30           | expression . mult_op expression
   31           | expression . exp_op expression
   31           | expression exp_op expression .
   32           | expression . and_op expression
   33           | expression . or_op expression
   34           | expression . comp expression

    '^'  shift, and go to state 68

    $default  reduce using rule 31 (expression)

    and_op   go to state 70
    or_op    go to state 71
    comp     go to state 72
    add_op   go to state 73
    mult_op  go to state 74
    exp_op   go to state 75


state 93

   56 function: function_name '(' arguments_opt . ')'

    ')'  shift, and go to state 100


state 94

   58 arguments_opt: arguments .
   60 arguments: arguments . ',' expression

    ','  shift, and go to state 97

    $default  reduce using rule 58 (arguments_opt)


state 95

   12 statement: WHILE '(' expression ')' statement .

    $default  reduce using rule 12 (statement)


state 96

   55 constructor: type '(' arguments ')' .

    $default  reduce using rule 55 (constructor)


state 97

   60 arguments: arguments ',' . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 101
    variable       go to state 44
    unary_op       go to state 45
    constructor    go to state 46
    function       go to state 47
    function_name  go to state 48


state 98

   15 else_statement: ELSE . statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 102
    variable   go to state 24


state 99

   11 statement: IF '(' expression ')' statement else_statement .

    $default  reduce using rule 11 (statement)


state 100

   56 function: function_name '(' arguments_opt ')' .

    $default  reduce using rule 56 (function)


state 101

   29 expression: expression . add_op expression
   30           | expression . mult_op expression
   31           | expression . exp_op expression
   32           | expression . and_op expression
   33           | expression . or_op expression
   34           | expression . comp expression
   60 arguments: arguments ',' expression .

    AND  shift, and go to state 56
    OR   shift, and go to state 57
    NEQ  shift, and go to state 58
    EQ   shift, and go to state 59
    LEQ  shift, and go to state 60
    GEQ  shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '^'  shift, and go to state 68

    $default  reduce using rule 60 (arguments)

    and_op   go to state 70
    or_op    go to state 71
    comp     go to state 72
    add_op   go to state 73
    mult_op  go to state 74
    exp_op   go to state 75


state 102

   15 else_statement: ELSE statement .

    $default  reduce using rule 15 (else_statement)
